# This file was generated by liblab | https://liblab.com/

from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel


class DataType(Enum):
    """An enumeration representing different categories.

    :cvar DEFAULT: "DEFAULT"
    :vartype DEFAULT: str
    :cvar TEAMREGEX: "TEAM_REGEX"
    :vartype TEAMREGEX: str
    """

    DEFAULT = "DEFAULT"
    TEAMREGEX = "TEAM_REGEX"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, DataType._member_map_.values()))


@JsonMap({"id_": "id", "type_": "type"})
class GetSecretTypesData(BaseModel):
    """Information about the secret type.

    :param name: The name of the secret type., defaults to None
    :type name: str, optional
    :param id_: The ID of the secret type., defaults to None
    :type id_: str, optional
    :param type_: The origin of the secret type: - `DEFAULT` — Supported by default in Postman. - `TEAM_REGEX` — A custom regex added by an Admin or Super Admin user in the **Configure Alerts** section of the [**Team Settings**](https://learning.postman.com/docs/administration/team-settings/) interface. , defaults to None
    :type type_: DataType, optional
    """

    def __init__(self, name: str = None, id_: str = None, type_: DataType = None):
        """Information about the secret type.

        :param name: The name of the secret type., defaults to None
        :type name: str, optional
        :param id_: The ID of the secret type., defaults to None
        :type id_: str, optional
        :param type_: The origin of the secret type: - `DEFAULT` — Supported by default in Postman. - `TEAM_REGEX` — A custom regex added by an Admin or Super Admin user in the **Configure Alerts** section of the [**Team Settings**](https://learning.postman.com/docs/administration/team-settings/) interface. , defaults to None
        :type type_: DataType, optional
        """
        if name is not None:
            self.name = name
        if id_ is not None:
            self.id_ = id_
        if type_ is not None:
            self.type_ = self._enum_matching(type_, DataType.list(), "type_")


@JsonMap({})
class GetSecretTypesMeta(BaseModel):
    """GetSecretTypesMeta

    :param total: The total number of supported secrets., defaults to None
    :type total: int, optional
    """

    def __init__(self, total: int = None):
        """GetSecretTypesMeta

        :param total: The total number of supported secrets., defaults to None
        :type total: int, optional
        """
        if total is not None:
            self.total = total


@JsonMap({})
class GetSecretTypes(BaseModel):
    """GetSecretTypes

    :param data: data, defaults to None
    :type data: List[GetSecretTypesData], optional
    :param meta: meta, defaults to None
    :type meta: GetSecretTypesMeta, optional
    """

    def __init__(
        self, data: List[GetSecretTypesData] = None, meta: GetSecretTypesMeta = None
    ):
        """GetSecretTypes

        :param data: data, defaults to None
        :type data: List[GetSecretTypesData], optional
        :param meta: meta, defaults to None
        :type meta: GetSecretTypesMeta, optional
        """
        if data is not None:
            self.data = self._define_list(data, GetSecretTypesData)
        if meta is not None:
            self.meta = self._define_object(meta, GetSecretTypesMeta)
